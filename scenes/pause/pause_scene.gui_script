local COMMON = require "libs.common"
local GUI = require "libs_project.gui.gui"
local ACTIONS = require "libs.actions.actions"
local SM = require "libs_project.sm"
local TWEEN = require "libs.tween"
local BaseGuiScript = require "libs_project.scripts.base_gui_script"
local SoundMusicGuiScript = require "libs.scripts.sound_music_gui_script"
local WORLD = require "world.world"

local TasksCellGui = COMMON.class("TasksGui")

---@param gui_script MainMenuSceneGuiScript
function TasksCellGui:initialize(template_name, gui_script)
	self.gui_script = assert(gui_script)
	self.template_name = assert(template_name)
	self.vh = {
		root = gui.get_node(self.template_name .. "/root"),
		completed = gui.get_node(self.template_name .. "/completed"),
		lbl_title = gui.get_node(self.template_name .. "/lbl_title"),
	}
	self.views = {
		progress = GUI.ProgressBar({
			root = gui.get_node(self.template_name .. "/progress/root"),
			bg = gui.get_node(self.template_name .. "/progress/bg"),
			progress = gui.get_node(self.template_name .. "/progress/progress"),
			lbl = gui.get_node(self.template_name .. "/progress/progress_lbl")
		}),
	}
	self.idx = 1
	self:init_gui()
	self:set_completed(false)
end

function TasksCellGui:set_completed(completed)
	gui.set_enabled(self.vh.completed, completed)
	self.views.progress:set_enabled(not completed)
end

function TasksCellGui:set_progress(progress, max)
	self.views.progress:set_value_max(max)
	self.views.progress:set_value(progress, true)
end

function TasksCellGui:set_title(str)
	local metrics = resource.get_text_metrics(gui.get_font_resource(gui.get_font(self.vh.lbl_title)), str)
	local size = gui.get_size(self.vh.lbl_title).x
	if (metrics.width > size) then
		local new_scale = 0.45 * size/metrics.width
		gui.set_scale(self.vh.lbl_title, vmath.vector3(new_scale))
	end
	gui.set_text(self.vh.lbl_title, str)
end

function TasksCellGui:set_idx(idx)
	self.idx = assert(idx)
end

function TasksCellGui:init_gui()
	self.views.progress.lbl_format_value = function(progress)
		return (math.floor(progress.animation.value))
	end
end


local TasksGui = COMMON.class("TasksGui")

function TasksGui:initialize(template_name, gui_script)
	self.template_name = assert(template_name)
	self.vh = {
		root = gui.get_node(self.template_name .. "/root"),
		slots = {
			{ completed = gui.get_node(self.template_name .. "/star_slots/slot_1/completed") },
			{ completed = gui.get_node(self.template_name .. "/star_slots/slot_2/completed") },
			{ completed = gui.get_node(self.template_name .. "/star_slots/slot_3/completed") },
		}
	}
	self.views = {
		tasks = {
			TasksCellGui(self.template_name .. "/cell_1", gui_script),
			TasksCellGui(self.template_name .. "/cell_2", gui_script),
			TasksCellGui(self.template_name .. "/cell_3", gui_script),
		},
	}
	self.state = nil
	self:init_gui()
	self:on_storage_changed()
end

function TasksGui:init_gui()
	for i, task_view in ipairs(self.views.tasks) do
		task_view:set_idx(i)
	end
end

function TasksGui:update_tasks()
	local completed_tasks = 0
	for i, task_view in ipairs(self.views.tasks) do
		task_view:set_title(WORLD.game.tasks:get_title(i))
		local progress = WORLD.game.tasks:get_value(i)
		local max = WORLD.game.tasks:get_max_value(i)
		local completed = WORLD.game.tasks:is_completed(i)

		task_view:set_progress(progress, max)
		if (completed) then completed_tasks = completed_tasks + 1 end
		task_view:set_completed(completed)
	end
	for i = 1, 3 do
		local slot_view = self.vh.slots[i]
		gui.set_enabled(slot_view.completed, i <= completed_tasks)
	end
end

function TasksGui:on_storage_changed()
	self:update_tasks()
end

---@class PauseSceneGuiScript:ScriptMain
local Script = COMMON.class("LoseSceneGuiScript", BaseGuiScript)

function Script:init()
	BaseGuiScript.init(self, { context_name = COMMON.CONTEXT.NAMES.PAUSE_GUI })
	gui.set_render_order(COMMON.CONSTANTS.GUI_ORDER.MODAL)
	--WORLD.sounds:play_sound(WORLD.sounds.sounds.lose)
	self.animation_action = ACTIONS.Sequence()
	self.animation_action.drop_empty = false
	self.subscription:add(COMMON.EVENT_BUS:subscribe(COMMON.EVENTS.WINDOW_RESIZED):go_distinct(self.scheduler):subscribe(function ()
		self:on_resize()
	end))
	self:on_resize()
end

function Script:bind_vh()
	self.vh = {
		modal = gui.get_node("modal"),
		fader = gui.get_node("fader"),
		bottom_left = gui.get_node("bottom_left"),
		btn_menu_title_lbl = gui.get_node("btn_menu/title_lbl"),
		btn_continue_title_lbl = gui.get_node("btn_continue/title_lbl"),
		tasks_title = gui.get_node("tasks/title"),
		title = gui.get_node("title"),
	}
	self.views = {
		btn_menu = GUI.ButtonScale("btn_menu"),
		btn_continue = GUI.ButtonScale("btn_continue"),
		tasks = TasksGui("tasks", self)
	}

	self.positions = {
		modal = gui.get_position(self.vh.modal),
	}
end

function Script:init_gui()
	BaseGuiScript.init_gui(self)
	self.commands_queue = ACTIONS.Sequence()
	self.commands_queue.drop_empty = false

	gui.set_text(self.vh.btn_continue_title_lbl,COMMON.LOCALIZATION.pause_btn_continue())
	gui.set_text(self.vh.btn_menu_title_lbl,COMMON.LOCALIZATION.pause_btn_menu())
	gui.set_text(self.vh.tasks_title,COMMON.LOCALIZATION.tasks_title())
	gui.set_text(self.vh.title,COMMON.LOCALIZATION.pause_title())

	self.fader_color = gui.get_color(self.vh.fader)
	local start_color = vmath.vector4(self.fader_color)
	start_color.w = 0
	gui.set_color(self.vh.fader, start_color)

	self.views.btn_menu:set_input_listener(function()
		--WORLD.sdk:ads_commercial(function()
			SM:get_scene_by_name(SM.MODALS.PAUSE)._input = { to_menu = true }
			SM:close_modals()
			WORLD.game:lose_to_menu()
			local ctx = COMMON.CONTEXT:set_context_top_fader()
			ctx.data:show()
			ctx:remove()
		--end)
	end)

	self.views.btn_continue:set_input_listener(function()
		SM:get_scene_by_name(SM.MODALS.PAUSE)._input = { to_menu = false }
		SM:close_modals()
		WORLD.sdk:gameplay_start()
	end)


end

function Script:animate_hide()
	while (not self.animation_action:is_empty()) do self.animation_action:update(1) end
	local start_color = vmath.vector4(self.fader_color)
	start_color.w = 0
	local show_parallel = ACTIONS.Parallel()

	show_parallel:add_action(ACTIONS.TweenGui { object = self.vh.fader, property = "color", v4 = true,
												to = start_color, time = 0.5, easing = TWEEN.easing.outCubic })

	show_parallel:add_action(ACTIONS.TweenGui { object = self.vh.modal, property = "color", v4 = true,
												to = vmath.vector4(1, 1, 1, 0), time = 0.5, easing = TWEEN.easing.outCubic, delay = 0 })

	show_parallel:add_action(ACTIONS.TweenGui { object = self.vh.bottom_left, property = "color", v4 = true,
												to = vmath.vector4(1, 1, 1, 0), time = 0.5, easing = TWEEN.easing.outCubic, delay = 0 })
	self.animation_action:add_action(show_parallel)


end

function Script:animate_show()
	while (not self.animation_action:is_empty()) do self.animation_action:update(1) end

	local start_color = vmath.vector4(self.fader_color)
	start_color.w = 0.3
	gui.set_color(self.vh.fader, start_color)

	gui.set_color(self.vh.modal, vmath.vector4(1, 1, 1, 0))
	gui.set_color(self.vh.bottom_left, vmath.vector4(1, 1, 1, 0))

	local show_parallel = ACTIONS.Parallel()

	show_parallel:add_action(ACTIONS.TweenGui { object = self.vh.fader, property = "color", v4 = true,
												to = self.fader_color, time = 0.3, easing = TWEEN.easing.outCubic })

	show_parallel:add_action(ACTIONS.TweenGui { object = self.vh.modal, property = "color", v4 = true,
												to = vmath.vector4(1, 1, 1, 1), time = 0.5, easing = TWEEN.easing.inQuad, delay = 0 })

	show_parallel:add_action(ACTIONS.TweenGui { object = self.vh.bottom_left, property = "color", v4 = true,
												to = vmath.vector4(1, 1, 1, 1), time = 0.5, easing = TWEEN.easing.inQuad, delay = 0 })

	self.animation_action:add_action(show_parallel)
end
function Script:update(dt)
	BaseGuiScript.update(self, dt)
	self.commands_queue:update(dt)
	self.animation_action:update(dt)
end


function Script:on_storage_changed()
	self.views.tasks:on_storage_changed()
end

function Script:on_input(action_id, action)
	if (self.commands_queue:is_empty()) then
		if (self.views.btn_menu:on_input(action_id, action)) then return true end
		if (self.views.btn_continue:on_input(action_id, action)) then return true end
	end
end

function Script:on_resize()
	local insets, status = safearea.get_insets()
	if (status == safearea.STATUS_OK) then
		local d_left = 960 * insets.left / COMMON.RENDER.screen_size.w
		local d_right = 960 * insets.right / COMMON.RENDER.screen_size.w
		gui.set_position(self.vh.bottom_left, vmath.vector3(d_left, 0, 0))
	elseif (status == safearea.STATUS_NOT_READY_YET) then
		timer.delay(0.5, false, function()
			self:on_resize()
		end)
	end
end

COMMON.N28S.register_scripts({ Script(), SoundMusicGuiScript() })